/**
 * @swagger
 * components:
 *   securitySchemes:
 *     bearerAuth:
 *       type: http
 *       scheme: bearer
 *       bearerFormat: JWT
 *   security:
 *     - bearerAuth: []
 *   schemas:
 *     Team:
 *       type: object
 *       required:
 *         - name
 *         - code
 *         - orgId
 *       properties:
 *         id:
 *           type: string
 *           description: The auto-generated id of the team
 *         name:
 *           type: string
 *           description: Name of team
 *         code:
 *           type: string
 *           description: Code is generated by system replacing spaces with hyphens
 *         orgId:
 *           type: string
 *           description: Org Id (Note this will be set to the requesters orgId)
 *         members:
 *           type: array
 *           description: Array of User IDs
 *         scope:
 *            type: string
 *            description: Specifies whether the team is an Org, Platform, Product or App team
 *       example:
 *         _id: 64c71fc66a9d6f3c5652f303
 *         name: Billing Reader
 *         code: bill
 *         members: ['6494e919214b77abb15476e2']
 *         scope: /
 *         orgId: 649960a3f696f0c379649ee2
 */

/**
 * @swagger
 * tags:
 *   name: Team
 *   description: Manage Teams (Set of Users)
 */

/**
 * @swagger
 * /teams:
 *  get:
 *    security:
 *      - bearerAuth: []
 *    summary: Returns all teams in the Org
 *    tags: [Team]
 *    responses:
 *      200:
 *        description: List of all teams
 *        content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: '#/components/schemas/Team'
 *
 */

/**
 * @swagger
 * /teams/{id}:
 *   get:
 *     security:
 *       - bearerAuth: []
 *     summary: Get the Team by ID
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: Displays a team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams:
 *   post:
 *     security:
 *       - bearerAuth: []
 *     summary: Creates a new Team within an Organisation
 *     tags: [Team]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Team'
 *     responses:
 *       200:
 *         description: The book was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schema/Team'
 *       500:
 *         description: Server Error
 */

/**
 * @swagger
 * /teams/{id}:
 *   delete:
 *     security:
 *       - bearerAuth: []
 *     summary: Deletes a Team by ID
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: The team description by id
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams/{id}:
 *   put:
 *     security:
 *       - bearerAuth: []
 *     summary: Update a Team by ID
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: The team description by id
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams/{id}/members:
 *   get:
 *     security:
 *       - bearerAuth: []
 *     summary: Get Team Members
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: Team Members
 *     responses:
 *       200:
 *         description: Return Team Members
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: No Team Members Found
 */

/**
 * @swagger
 * /teams/{id}/members:
 *   patch:
 *     security:
 *       - bearerAuth: []
 *     summary: Add team members
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: Updated Team Members
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: Unable to Update Team members
 */

/**
 * @swagger
 * /teams/{id}/members/remove:
 *   patch:
 *     security:
 *       - bearerAuth: []
 *     summary: Remove Team Members
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: Remove Team Members
 *     responses:
 *       200:
 *         description: The team description by id
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: Remove Team Members
 */

/**
 * @swagger
 * /teams/{id}/owners:
 *   get:
 *     security:
 *       - bearerAuth: []
 *     summary: Get Owner of Team
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: Get Owner of Team
 *     responses:
 *       200:
 *         description: Get Owner of Team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: Team Owner not found
 */

/**
 * @swagger
 * /teams/{id}/owners:
 *   patch:
 *     security:
 *       - bearerAuth: []
 *     summary: Update Owner of Team
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: Update Owner of Team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams/{id}/owners/remove:
 *   patch:
 *     security:
 *       - bearerAuth: []
 *     summary: Remove Owner from Team
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: The Team ID
 *     responses:
 *       200:
 *         description: Remove Owner from Team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams/{id}/members/{uid}:
 *   put:
 *     security:
 *       - bearerAuth: []
 *     summary: Check is UID is a Member of Team
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID of Team
 *     responses:
 *       200:
 *         description: Check if User UID is member of Team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

/**
 * @swagger
 * /teams/{id}/owners/{uid}:
 *   put:
 *     security:
 *       - bearerAuth: []
 *     summary: Update Owner of team
 *     tags: [Team]
 *     parameters:
 *       - in: path
 *         name: id
 *         schema:
 *           type: string
 *         required: true
 *         description: ID of Team
 *     responses:
 *       200:
 *         description: Check if UID is owner of Team
 *         contents:
 *           application/json:
 *             schema:
 *              $ref: '#/components/schemas/Team'
 *       404:
 *         description: The Team was not found
 */

import express from "express";
import { protect } from "../middleware/authMiddleware.js";
import { authz } from "../middleware/authzMiddleware.js";

const router = express.Router();
import {
  getTeam,
  getTeams,
  setTeam,
  updateTeam,
  deleteTeam,
  updateTeamMembers,
  deleteTeamMembers,
  getTeamMembers,
  getTeamOwners,
  updateTeamOwners,
  deleteTeamOwners,
  isMember,
  isOwner,
} from "../controllers/teamController.js";

router.route("/").get(protect, authz, getTeams).post(protect, authz, setTeam);
router
  .route("/:id")
  .get(protect, authz, getTeam)
  .put(protect, authz, updateTeam)
  .delete(protect, authz, deleteTeam);

router
  .route("/:id/members")
  .get(protect, authz, getTeamMembers)
  .patch(protect, authz, updateTeamMembers);

router.route("/:id/members/remove").patch(protect, authz, deleteTeamMembers);

router
  .route("/:id/owners")
  .get(protect, authz, getTeamOwners)
  .patch(protect, authz, updateTeamOwners);

router.route("/:id/owners/remove").patch(protect, authz, deleteTeamOwners);

router.route("/:id/members/:uid").get(protect, authz, isMember);
router.route("/:id/owners/:uid").get(protect, authz, isOwner);

export default router;
